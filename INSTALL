This project has been made with:

    - Linux Mint 64-bit (Current: 17.2 Rafaela)
    - DMD compiler (current: 2.069.0-b2)
    
It is far from easy to be compiled on other platforms at the moment. I try
later simplify the process in the future.

To successfully compile and run projects, you will need:

1) GAME CONTROLLER:

   Except for testbench/pacman, all the game prototypes
   require game controller (XBox) to work. Implementation of "emulated"
   joystick (using mouse & keyboard) is planned, but not yet started.


2) OpenGL

   You will need at least OpenGL 2.1. I have currently been planning to move
   on to OpenGL 3.3, because it has many nice features to study closer.

3) BUILD TOOLS:

   Usual Linux-side building tools:

   * GNU make

   NOTE: Preliminary dub building support exists.


4) SYSTEM LIBRARIES

   System side libraries: Linux users may find these from their distribution's
   repository, if not, you can install them from sources.

        * OpenGL 2.1+         For graphics
        * SDL 2               Input, CPU side graphics, ...
        * SDL 2 TTF           For loading & rendering fonts
        * SDL 2 Image         For loading images
        * Assimp 3.0+         For loading 3D models
   
   Your system should have support at least for PNG images. I'm not sure how
   std.zip is implemented, but it may require zlib.

5) DMD D COMPILER:

   This is easy to install to both Linux and Windows, and
   you can get it here:

        http://dlang.org/download.html

   Previous version I was using was 2.067.1. I installed new version (2.069.0-b2)
   recently, and it seems to work.

6) DUB

   Project uses D libraries via dub. It can be downloaded here:
   
        http://code.dlang.org/download
        
   Currently I am using version 0.9.24.

7) D LIBRARIES

   The project uses:

        * derelict: For OpenGL, SDL2 and Assimp3 bindings
        * gl3n: 3D maths

   There is preliminary support in Makefile to fetch these. Go in one of the
   project directories, and type 'make fetch', for example:
   
        $ cd testbench/pacman
        testbench/pacman$ make fetch

8) If everything is fine, you can compile and run some of the examples
   using make:

      testbench/pacman$ make default

Sadly to Windows users, current build system utilizes common Linux side
building tools and symbolic links. I will continue to simplify the build.

