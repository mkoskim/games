This project has been made with:

    - Linux Mint 64-bit (Current: 18.3)
    - DMD compiler (Current: 2.082.0)

You may encounter compatibility problems on other platforms and compilers.
See notes at bottom.

-------------------------------------------------------------------------------

There is now setup.sh which tries to simplify installation of necessary
libraries. Try it:

    $ ./setup.sh

If everything goes right, it installs (1) system side libraries and (2) DMD
compiler. If everything does not go well, you may need to tweak your
installation manually.
	
-------------------------------------------------------------------------------

To successfully compile and run projects, you will need:

1) SYSTEM SIDE LIBRARIES

   If setup.sh works, it installs following system side libraries (on Linux
   machines). If it does not work, you may need to install these manually,
   maybe even from sources.

        * OpenGL 3.3+         For graphics
        * SDL 2               Input, image files, ...
        * SDL 2 Image         For loading images
        * SDL 2 TTF           For loading & rendering fonts
        * Assimp 3.0+         For loading 3D models
        * Lua 5.3             For scripting
   
   You will need at least OpenGL 3.3. As this is an exploration project to
   OpenGL and 3D graphics world, I like to use certain features not available
   at earlier versions.

   SDL is mainly used to get interface to game controllers. Because it was
   used for that, it is nowadays also used for other important purposes:
   (1) loading image files, (2) rendering fonts, and (3) creating game window
   and OpenGL context.
   
   Your system should have support at least for PNG images. I'm not sure how
   std.zip is implemented, but it may require zlib. Luckily, both are
   usually installed by default in Linux systems.
   
   ASSIMP was included to project to allow using of other than Wavefront
   OBJ files (for which it is easy to write loader on your own).
   
   LUA was included to implement scripted "loaders". A freetime developer do
   not have a privilege to have specifically prepared resource files for
   assets, instead you grab files from many different sources. These resources
   may need post-processing and organizing, and it would be best done with a
   script in the same directory.

   D side bindings to these libraries come with the project as submodules.

-------------------------------------------------------------------------------

2) BUILD TOOLS:

   Project uses GNU make to build the software. This is usually installed
   to Linux systems by default.

-------------------------------------------------------------------------------

3) DMD D COMPILER:

   setup.sh retrieves the chosen DMD compiler installation package to games/local/
   directory, and installs it for the system. In case the script does not work, you
   can get DMD here (for both Linux and Windows):

        http://dlang.org/download.html

   Current version in use is 2.082.0

-------------------------------------------------------------------------------

4) If everything is fine, you can compile and run some of the examples
   using make. There is an empty project, which is used to test basic
   building:

      testbench/empty$ make

   It just opens a black window, and waits user to press ESC to close it.
   
   Usually, not many other projects work. This is because the shared side
   has been in heavy refactoring cycle all the time, and I have not had
   time to bring the projects up to date.
  
-------------------------------------------------------------------------------

5) ADDITIONAL INFO:

   GAME CONTROLLER: My aim is to make games which use XBox game controller.
   Because of this reason, not all projects will work nicely without having one.
   But I have implemented a game controller "emulator" on the top of keyboard,
   so many projects should work without having an actual one. Moreover, I have
   thought to implement a keyboard-mouse based emulator later (as it is one
   of the most used control method in PC games).

   WINDOWS: Sadly to Windows users, current build system utilizes common Linux
   side building tools and symbolic links. I will continue to simplify the
   build, and maybe at some point I can make a working Windows version.
