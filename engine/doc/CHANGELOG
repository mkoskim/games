*******************************************************************************

*******************************************************************************

-------------------------------------------------------------------------------

Version something:

- Somewhat done: I should go through code and correct indentation

- Shader: moved Shader class a little bit lower level, and added initial
  support for instanced drawing to interface.

- Remove color attribute from Material: it is meant to be instance-specific
  material modifier, analogous to Model matrix which is instance-specific
  transformation modifier. For example, for particle engines, we need
  instance specific struct, like:
  
        struct INSTANCE { mat4 model; vec4 color }

-------------------------------------------------------------------------------

Version something:

- Done: There is a great need to have improved compilation mechanism.
  That is, separating CPU-GPU interface parts (uniforms, attributes),
  interface between vertex and fragment shader, and have something to
  help "plugging" different vertex and fragment shaders together.

- Done: Stupid user error, the gl3n examples clearly instruct to transpose
  matrices when sending them to GPU. (Matrix multiplication order is different
  in GLSL than in D. It would be very nice that the multiplication order would
  follow some standard. Investigate this problem closer, and decide what to
  do (transpose when sending?))

- Somewhat done: Trying to make runtime configurable uniforms not working...
  Current solution is to open uniform setting outside. It is important to
  call shader activation to do this. Because of that, we need to improve
  the interface: exposing a method that does not work reliably is not
  an answer, and I don't want to add shader activation to all uniform
  settings, as they are called in performance critical parts (although
  the time missed to see that current shader is active is probably
  insignificant). It is just about principles.

- DONE: use size_t instead of ulong/uint (sizeof, length, ...)

-------------------------------------------------------------------------------

Version something:

- Done: Reducing vertex data size to improve GPU cache performance: Normals and
  UV coordinates could have smaller input precision:
  
  	* https://www.opengl.org/wiki/Vertex_Specification_Best_Practices#Attribute_sizes

- Done: Vertex data compression. There are bugs to fix, thought.

- Done: We now compute frustum planes every time, but it is only necessary
  when changing camera projection... Now Frustum (planes) are cached.

- Done: It might be good to separate exotic data formats needed in VBOs to
  their own source file.

- Done: Stupid user error, didn't change the field type at 2D shader side.
  (unsigned short does not work as UV coordinates. Colormaps on 3D models
  work without problem, but not on 2D objects (e.g. text and pacman).
  Investigate the problem. It is also true, that UV coordinates can be
  larger (absolute value) than 1.0, so it could be better to look for
  half floats.)

- Done: UV coordinates are sent as half floats

- Done: attrib function needs a mechanism to automatically choose correct attribute
  binding based on the Mesh.VERTEX types, just like uniforms work. Current
  implementation is a bit clumpsy, but it works.

- Done: "static if" now forces vertex data to be 32 bytes. It would be nice to
  have automatic padding, but even this is a step forward to improve GPU cache
  performance.

-------------------------------------------------------------------------------

Version something:

- Done: (GL) VAOs not working, maybe because of OpenGL version? No, it was
  just some missing code in certain positions.

- Done: Implement interleaved vertex attribute arrays. Interleaved data is
  definitely the easiest one from programming side, I just didnt know how
  to implement it when started developing the engine.

- Postponed: Joystick support; don't forget feedback. Sadly, my game controller
  has no force feedback.

- Done: Normal mapping

-------------------------------------------------------------------------------

Version something:

- Done: Wavefront obj files: Compute (face) normals, if they are missing

- Done: Shape class: We need Layer.Instance 'stencils', or color & texture
  in Mesh: most of time, at least texture is strictly bound to mesh, and will
  not work at other meshes.

- Done: Basic CPU-side bitmap manipulation

- Done: Object hierarchies: parenting cameras and lights to 3D space, very
  much needed feature. Somewhat done...

- Done: Currently, parent objects need not to be in draw lists. How about
  naming them bones?

- Done: Now matrix transform hierarchies are encapsulated under Bone
  class. It can be parented, and it is not part of Scene drawing lists.
  This may cause some problems to clean up "bones" when deleting
  3D objcts?

-------------------------------------------------------------------------------

Version something:

- Done: Fiber cleaning... Fiber list is now a class. Going out of scope
  destroys it.

- Done: Get rid of game.start() - now e.g. performance timers are created
  automatically if they are requested.

- Done: Fonts (TTF font loading & rendering)

- Done: Frustum culling using bounding spheres.

- Done: With Fibers, at least. Some sort of mechanism to create 'temporal'
  objects to layer: for example, explosions and such, which have known & limited
  life time.
  
- Done: Textures from sheet images

- Done: When creating Layer instances, pass them to shader to prepare them (filling
  missing values with reasonable defaults)

