Some sort of development diary, which I hope to help me to give me clear
thoughts about the development.

-------------------------------------------------------------------------------

April 10, 2017: After over one and half year break, I came back to develop
this game engine and game collection. Not surprisingly, I am still struggling
with the architectural problems. This time I have three objectives:

1) Finalize ASSIMP-based asset loader.

2) Integrate Lua scripting to asset loading.

3) Implement mechanism to create family of compatbile shaders, to be able
   to create one VAO from object and use it with all shaders.

Why Lua for asset loading? It would be much easier to set up assets if
you can add script to disk to prepare the loading: for example, choosing
right meshes and materials from "atlas" file when accessing something.

Compatible shader families: Mainly this would mean that certain vertex
attributes are bind to certain (fixed) locations. There is generally two
ways to do this: (1) Using "layout(location=X)" in the GLSL, and (2) using
glBindAttribLocation.

My current thought is that I use glBindAttribLocation. If I can make it
working, you would not need to explicitly assign locations to attributes in
GLSL, but the engine would assign them to same locations when loading shaders.

One new thing is that I examine possibilities to create uniform buffers
for frame-wide parameters, like projection and view matrices. Uniform
buffers work so that you put the values to them once, and can use those values
in all compatible shaders.

Uniform buffers may not help with object-specific settings like skeletal
animation and materials, but this we will see later.

-------------------------------------------------------------------------------

May 12, 2015: After few months break, I came back to develop this game engine
and game collection. I am still struggling with the architectural problems.

The main source of inconvience is how text rendering class works. It causes
problems to restructure architecture.

At high levels, I need to continue developing a framework to ease game
prototyping further. Then, I definitely need to continue work at low levels.
I have been thinking to separate shaders and whole GPU infrastructure to
separate "subsystem", and design some sort of middleware between game and
low level primitives.

I have been examining existing game engine architectures with no luck and
great ideas so far.

-------------------------------------------------------------------------------

Dec 31, 2014: I have been struggling with architectural things. On my TODO
list, there is lots of things to be done, but I can't start implementing
them before I have clean idea of the future directions. I don't want to write
too much code which I then need to rewrite.

There are many small things:

- I have been thinking how to implement player input. What is the game's
  responsibilty of processing input? Should I write a package that translates
  mouse, keyboard and joystick inputs to something usable for a game, or
  should game itself implement interpretation of input devices?

- Player object: in many ways, everything is inside player object. Player
  may have "avatar" on a screen, but player actions dominate what happens
  in the game - opening menus, quitting, etc.

- When thinking implementation of new text rendering mechanism, I was thinking
  the architecture in general. There is a need for separate sprite blitting
  shader, divided to sprite sheet shader, static sprite sheet shader, and so
  on. I started to think that what if shaders are connected to data structures
  they can blit? That is, all current shaders are "MeshShader" classes, they
  take in a Mesh and blit it on screen. Similar way, programmer could create
  sprite sheets and get them on screen with dedicated shader.
  
- Interaction between things: texts, sprites, 3D objects, they all can have
  some relationships to each other. You may want text to appear at the top of
  a 3D model. Text itself is highly related - characters follow each other,
  lines follow each other. Text blocks are anchored to different points.

In general, I started to think what is the responsibility of an engine, and
what is needed from game side to implement a game? Is engine more like a tool
box, offering different tools to a game? Or

